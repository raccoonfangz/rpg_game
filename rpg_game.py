import time
import os
import random
import sys
import copy
import json
# -------------------------------------------------------

# hp bar


def hp_bar(current_hp, max_hp, bar_length=20):
    filled_length = int(bar_length * current_hp / max_hp)
    bar = '■' * filled_length + '-' * (bar_length - filled_length)
    return f"[{bar}] {current_hp}/{max_hp}"

# ^--------------------HP BAR----------------------------^

# clear function


def clear():
    os.system('cls' if os.name == 'nt' else 'clear')


# STARTING DATA
default_state = {
    "NOTE 1": "This save file was generated by Ash's RPG game.",
    "NOTE 2": "Do not cheat please you cheeky bastard. Or do, as long as you enjoy it :]",
    "PLAYER_NAME": None,
    "TOTAL_COINS_EARNED": 0,
    "COIN_BALANCE": 0,
    "MAX_HEALTH": 100,
    "PLAYER_HEALTH": 100,
    "XP": 0,
    "TOTAL_XP": 0,
    "GAME_RUNNING": True,
    "MAGIC_SHIELD": False,
    "KILL_COUNT": 0,
    "DAMAGE_UPGRADE": 0,
    "ALCOHOL_CONSUMED": 0,
    "SELECTED_DIFFICULTY": "normal",
    "SELECTED_WEAPON": None,
    "SELECTED_ENCHANTMENTS": None,
    "CHEATED": False,
    "GAMBLED": False,
    "CAVE_ENTERED": False,
    "UNLOCKED_CHEST": False,
    "CLAIMED_LVL": [],
    "BOUGHT_ITEMS": [],
    "BOUGHT_WEAPONS": [],
    "PLAYER_ENCHANTMENTS": [],
    "FORGE_UPGRADES": [],
    "ACHIEVEMENTS": {
        "KILLED": [],
        "COINS EARNED": [],
        "MISCELLANEOUS": [],
    },
    "MASTERY": False,
    "META_POINTS": 0,
    "META_ITEMS": [],
    "SURVIVOR_USED": False,
    "BLEEDING": False,
    "VENOM": False,
}

# save


def save_game(state, filename="rpg_save.json"):
    with open(filename, "w") as f:
        json.dump(state, f, indent=4)
    print("\nGame saved.")

# save without message


def quiet_save_game(state, filename="rpg_save.json"):
    with open(filename, "w") as f:
        json.dump(state, f, indent=4)

# load


def load_game(filename="rpg_save.json"):
    if os.path.exists(filename):
        with open(filename, "r") as f:
            return json.load(f)
    return default_state.copy()

# delete


def delete_save(filename="rpg_save.json"):
    ask = input("\nAre you sure? (y/n)  ")
    if ask == "yes" or ask == "y":
        if os.path.exists(filename):
            os.remove(filename)
            print("\nSave file deleted.")
        else:
            print("\nNo save file found.")
    else:
        print("\nDeletion abandoned")


game_state = default_state.copy()

# enemy scaling


def calculate_difficulty():
    level = game_state['TOTAL_XP'] // 150
    easy_multiplier = 1.05 ** level
    normal_multiplier = 1.1 ** level
    hard_multiplier = 1.25 ** level

    if game_state['SELECTED_DIFFICULTY'] == "hard":
        return hard_multiplier
    elif game_state['SELECTED_DIFFICULTY'] == "normal":
        return normal_multiplier
    elif game_state['SELECTED_DIFFICULTY'] == "easy":
        return easy_multiplier


# opponent attack damage

def opp_attack(opponent):
    difficulty = calculate_difficulty()
    effective_difficulty = difficulty - 0.05
    min_atk = int(opponent["Attack"][0] * effective_difficulty)
    max_atk = int(opponent["Attack"][1] * effective_difficulty)

    if max_atk < min_atk:
        max_atk = min_atk

    return random.randint(min_atk, max_atk)

# game starting menu


def starting():
    global game_state
    if_starting = True
    while if_starting:
        clear()
        print(r'''
           _________  ___  ___  _______           ________  ________  ________
          |\___   ___*\\  \|\  \|\  ___ \         |\   __  :\|\   __  \|\   ___\
           \|___ \  \_\ \  \\\  \ \   __/|        \ \  \|\  \ \  \|\  \ \  \___|
               \ \  \ \ \   __  \ \  \_|/__       \ \   _  _\ \   ____\ \  \  ___
                \ \  \ \ \  \ \  \ \  \_|\ \       \ \  \\  \\ \  \___|\ \  \|\ x \
                 \ \__\ \ \__\ \__\ \_______\       \ \__\\ _\\ \__\    \ \_______\
                  \|__|  \|__|\|__|\|_______|        \|__|\|_v_|\|__|     \|_______|
                  ''')
        print("\n1. Load Game\n2. New Game\n3. Difficulty (Default - Normal)\n4. Credits\n5. Quit\n6. Delete save")
        pick = input("\nEnter your choice:  ").lower().strip()

        if pick == "1" or pick == "load" or pick == "load game":
            if not os.path.exists("rpg_save.json"):
                print("\nNo save file found.")
                time.sleep(1.2)
            else:
                preserved_meta = game_state.get("META_POINTS", 0)
                preserved_items = game_state.get("META_ITEMS", [])
                loaded = load_game()
                game_state = loaded
                if not game_state.get('GAME_RUNNING', True):
                    print("\nYou died in your save")
                    time.sleep(1)
                    print("\nStarting a new game. Game progress saves automatically!")
                    selected_difficulty = game_state.get(
                        "SELECTED_DIFFICULTY", "normal")
                    game_state = default_state.copy()
                    game_state["META_POINTS"] = preserved_meta
                    game_state["META_ITEMS"] = preserved_items
                    game_state["SELECTED_DIFFICULTY"] = selected_difficulty
                    game_state["GAME_RUNNING"] = True
                    quiet_save_game(game_state)
                    time.sleep(2)
                    if_starting = False
                else:
                    print("\nGame loaded.")
                    time.sleep(1)
                    if_starting = False

        elif pick == "2" or pick == "new" or pick == "new game":
            preserved_meta = 0
            preserved_items = []
            if os.path.exists("rpg_save.json"):
                try:
                    with open("rpg_save.json") as f:
                        loaded_data = json.load(f)
                        preserved_meta = loaded_data.get("META_POINTS", 0)
                        preserved_items = loaded_data.get("META_ITEMS", [])
                except (json.JSONDecodeError, KeyError):
                    preserved_meta = 0
                    preserved_items = []
            selected_difficulty = game_state.get(
                "SELECTED_DIFFICULTY", "normal")
            game_state = default_state.copy()
            game_state["META_POINTS"] = preserved_meta
            game_state["META_ITEMS"] = preserved_items
            game_state["GAME_RUNNING"] = True
            game_state["SELECTED_DIFFICULTY"] = selected_difficulty
            quiet_save_game(game_state)
            if_starting = False
            print("\nStarting a new game. Game progress saves automatically!")
            time.sleep(1.7)

        elif pick == "3" or pick == "difficulty":
            clear()
            print(
                "Easy - 1.05x enemy stats per scaling"
                "\nNormal - 1.1x enemy stats per lvl scaling"
                "\nHard - 1.25x enemy stats per lvl scaling"
                "\n\nBe careful since stats grow exponentially\nin higher levels combat can become unplayable!"
            )
            diff_choice = input(
                "\nChoose difficulty (easy/normal/hard):  ").lower().strip()
            if diff_choice in ["easy", "normal", "hard"]:
                game_state['SELECTED_DIFFICULTY'] = diff_choice
                print(f"\nDifficulty set to {diff_choice.upper()}")
                time.sleep(1)
            else:
                print("\nInvalid difficulty.")
                time.sleep(1)

        elif pick == "4" or pick == "credits":
            clear()
            print(r"""
╔══════════════════════════════════════╗
║               CREDITS                ║
╠══════════════════════════════════════╣
║ Made by: Ashton <3                   ║
║                                      ║
║ Version 1.3 - 2025                   ║
╚══════════════════════════════════════╝
           """)
            input("Press Enter to return to continue...")

        elif pick == "5" or pick == "quit":
            clear()
            print("Farewell!")
            time.sleep(1)
            sys.exit()

        elif pick == "6" or pick == "delete":
            delete_save(filename="rpg_save.json")
            time.sleep(2)
        else:
            print("\nUnknown command")
            time.sleep(1)


def calculate_score(game_state):
    score = 0

    # meta points
    score += game_state.get('META_POINTS', 0)

    score += game_state['TOTAL_COINS_EARNED'] // 5  # 1 point per 5 coins
    score += int(game_state['KILL_COUNT'] * 2)  # 2 points per kill
    score += int(game_state['TOTAL_XP'] ** 0.9)  # XP

    # alcohol consumed
    score += int(game_state['ALCOHOL_CONSUMED'] * 2)

    # shield bonus
    if game_state['MAGIC_SHIELD']:
        score += 20

    # penalty for cheating
    if game_state['CHEATED']:
        score = 0

    # mastery bonus
    if game_state['MASTERY']:
        score += 500

    return max(score, 0)

# game over


def death():
    global game_state

    if game_state['PLAYER_HEALTH'] > 0:
        return  # Player still alive

    if "survivor" not in game_state.get('META_ITEMS', []) or game_state.get('SURVIVOR_USED', False):
        clear()
        earned = calculate_score(game_state)
        game_state['META_POINTS'] += earned
        preserved_meta = game_state.get("META_POINTS", 0)
        print(r"""
       _____                           ____
      / ____|                         / __ \
     | |  __  __ _ _ __ ___   ___    | |  | |_   _____ _ __
     | | |_ |/ _` | '_ ` _ \ / _ \   | |  | \ \ / / _ \ '__|
     | |__| | (_| | | | | | |  __/   | |__| |\ V /  __/ |
      \_____|\__,_|_| |_| |_|\___|    \____/  \_/ \___|_|
        """)
        print(f"\n\nMonsters slain: {game_state['KILL_COUNT']}")
        print(f"Alcohol drank: {game_state['ALCOHOL_CONSUMED']}")
        print(f"Total xp: {game_state['TOTAL_XP']}")
        time.sleep(0.1)
        print(f"Score: {preserved_meta}\n\n")
        game_state["GAME_RUNNING"] = False
        quiet_save_game(game_state)
    else:
        clear()
        print("You escaped death by using your survivor perk. You are brought back to life with 1 HP.")
        game_state['SURVIVOR_USED'] = True
        game_state['PLAYER_HEALTH'] = 1
        quiet_save_game(game_state)
        return

# magic coin specific attack


def magic_coin_attack():

    if random.random() < 0.1:
        return 100
    else:
        return 0

# ^----------------------misc--------------------------------^


# Starting the game
starting()


opponent_list = {  # 50% to heal to full hp while under 15% zombies health
    "Zombie": {
        "Base_Health": 30,
        "XP": 25,
        "Attack": (5, 10),
        "Reward": (7, 23),
        "Special": "heal_under_15"
    },
    "Sorcerer": {
        "Base_Health": 50,
        "XP": 30,
        "Attack": (3, 13),
        "Reward": (10, 30),
    },
    "Knight": {  # 15% dmg reduiction from player
        "Base_Health": 30,
        "XP": 35,
        "Attack": (1, 14),
        "Reward": (10, 25),
        "Special": "reduce_damage"
    },
    "Dragon": {  # 15% chance for a fire breath - extra 20%dmg dealt to player
        "Base_Health": 75,
        "XP": 95,
        "Attack": (7, 10),
        "Reward": (21, 50),
        "Special": "fire_breath"
    },
    "Ghost": {  # 50% chance to not take damage
        "Base_Health": 15,
        "XP": 15,
        "Attack": (5, 5),
        "Reward": (5, 10),
        "Special": "dodge_half"
    },
    "???": {  # 15% chance to attack twice in a row
        "Base_Health": 150,
        "XP": 125,
        "Attack": (8, 14),
        "Reward": (35, 50),
        "Special": "dobule_attack"
    },
    "Goblin": {
        "Base_Health": 15,
        "XP": 20,
        "Attack": (3, 7),
        "Reward": (5, 10),
    },
    "Skeleton": {
        "Base_Health": 25,
        "XP": 15,
        "Attack": (3, 9),
        "Reward": (2, 14),
    },
    "Thief": {  # 33% chance for him to steal 33% of player coins
        "Base_Health": 25,
        "XP": 20,
        "Attack": (2, 10),
        "Reward": (4, 13),
        "Special": "steal"
    },
    "Hungry wolf": {  # 40% chance to give player bleeding effect (-5hp every turn)
        "Base_Health": 45,
        "XP": 25,
        "Attack": (8, 12),
        "Reward": (4, 12),
        "Special": "bleeding"
    },
    "Spectre": {  # 30% chance to take 0dmg and dobule it's damage to player
        "Base_Health": 13,
        "XP": 15,
        "Attack": (2, 10),
        "Reward": (4, 8),
        "Special": "hit back"
    },
    "Venomous snake": {  # gives player venomous bite effect (-5hp every turn)
        "Base_Health": 45,
        "XP": 25,
        "Attack": (6, 10),
        "Reward": (7, 10),
        "Special": "venom"
    },
    "Lost Warrior": {
        "Base_Health": 65,
        "XP": 35,
        "Attack": (7, 10),
        "Reward": (15, 29),
    },
}

cave_opponent_list = {
    "Dark dragon": {
        "Base_Health": 500,
        "XP": 125,
        "Attack": (10, 25),
        "Reward": (50, 75),
    },
    "Guardian": {
        "Base_Health": 350,
        "XP": 85,
        "Attack": (20, 35),
        "Reward": (50, 75),
    },
    "King cobra": {
        "Base_Health": 250,
        "XP": 65,
        "Attack": (25, 45),
        "Reward": (50, 85),
    },
    "Hyena": {
        "Base_Health": 100,
        "XP": 75,
        "Attack": (25, 50),
        "Reward": (50, 85),
    },
}

inventory_items = {
    "wooden sword": {
        "Title": "Wooden sword",
        "Attack": (3, 11),
    },
    "wooden spear": {
        "Title": "Wooden spear",
        "Attack": (5, 8),
    },
    "glass shard": {
        "Title": "Glass shard",
        "Attack": (0, 3),
    },
    "magic coin": {
        "Title": "Magic coin",
        "Attack": (0, 100),
    },
    "steelsw": {
        "Title": "Steel sword",
        "Attack": (10, 17),
    },
    "steelax": {
        "Title": "Steel axe",
        "Attack": (13, 20),
    },
    "ironmace": {
        "Title": "Iron mace",
        "Attack": (18, 24),
    },
    "shiny infinity blade": {
        "Title": "Shiny infinity blade",
        "Attack": (60, 120)
    },
    "world splitter": {
        "Title": "World splitter",
        "Attack": (200, 400)
    },

}
enchantments = {
    "vampirism I": {
        "Title": "vampirism I",
        "Health_regen": 0.2,  # 20% opp max health regeneration
    },
    "critical": {
        "Chance": 0.1  # 10% per attack
    },
    "theft": {
        "Bonus": 0.2  # 20% more coins
    },
    "experienced": {
        "xp_boost": 0.15  # 15% more XP
    },
    "swiftness": {},  # Fleeing dosen't deal damage

    "vampirism II": {
        "Title": "vampirism II",
        "Health_regen": 0.15,
    },
    "dustybook": {
        "Title": "dusty book",
        "xp_boost": 0.15  # 15% more XP
    },
    "irongloves": {
        "Title": "irongloves",
        "Chance": 0.05  # 5% per attack
    },
}

random_events = {
    "shrine": {
        "Message": "\nYou've found a magic shrine!"
    },
    "dice": {
        "Message": "\nYou are brought to a dice throwing fight!"
    },
    "trap": {
        "Message": "\nYou fall into a trap and hurt your leg. You've lost 10 health"
    },
    "scratcher": {
        "Message": "\nYou stumble upon a scratch card!"
    }


}
flee_events = {
    "fall": {
        "message": "Your dumb ass tripped over a branch.\nYou've lost 15 health",
        "health_penalty": 15
    },
    "lost": {
        "message": "You were running so fast you got lost in the forest\nGetting back on path has cost you 10 health",
        "health_penalty": 10
    },
    "unlucky": {
        "message": "The opponent got to you anyways.\nYou die, beaten to death",
        "health_penalty": 100000
    },
    "drop": {
        "message": "You've dropped your weapon while running.\nYou fell forward reaching for it and banged your head onto the ground\nYou've lost 12 health",
        "health_penalty": 12
    },
    "stomp": {
        "message": "While running, you stomp on a rusty nail\nYou've lost 8 health",
        "health_penalty": 8
    },
    "coindrop": {
        "message": "Whoops, you've dropped some coins while fleeing!",
    },
    "otheropp": {
        "message": "You've encountered another enemy!",
    },

}

perishable_items = ["dagger", "bomb", "health potion",]

attack_texts = ["attacked", "slammed", "slashed",
                "struck", "stabbled", "whacked", "bashed", "hit", "clobbered", "hammered",
                "swung at", "sliced", "lunged at", "jabbed", "tore into", "banged", "whipped", "pounded", "striked"]
# ^-------------------LISTS--------------------------^


def apply_enemy_special(enemy_name, enemy_hp, max_hp, player_damage, game_state):
    special = opponent_list[enemy_name].get("Special", None)

    extra_enemy_damage = 0

    if special == "heal_under_15":
        if enemy_hp <= 0.15 * max_hp and random.random() < 0.5:
            print(f"\n{enemy_name} regenerates to full health!")
            time.sleep(2)
            return max_hp, player_damage, extra_enemy_damage

    elif special == "reduce_damage":
        player_damage = int(player_damage * 0.85)  # 15% damage reduction

    elif special == "fire_breath":
        if random.random() < 0.15:
            print(f"\n{enemy_name} uses Fire Breath!")
            time.sleep(2)
            extra_enemy_damage += int(player_damage * 0.2)

    elif special == "dodge_half":
        if random.random() < 0.5:
            print(f"\n{enemy_name} dodges the attack!")
            time.sleep(2)
            return enemy_hp, 0, extra_enemy_damage

    elif special == "double_attack":
        if random.random() < 0.15:
            print(f"\n{enemy_name} strikes twice!")
            time.sleep(2)
            extra_enemy_damage += random.randint(*
                                                 opponent_list[enemy_name]["Attack"])

    elif special == "steal":
        if random.random() < 0.33:
            stolen = int(game_state["COIN_BALANCE"] * 0.33)
            game_state["COIN_BALANCE"] -= stolen
            print(f"\n{enemy_name} steals {stolen} coins!")
            time.sleep(2)

    elif special == "bleeding":
        if random.random() < 0.4 and not game_state.get("BLEEDING", False):
            game_state["BLEEDING"] = True
            print("\nYou are bleeding! (-5hp every turn)")
            time.sleep(2)

    elif special == "venom":
        if random.random() < 1 and not game_state.get("VENOM", False):
            game_state["VENOM"] = True
            print("\nYou've been poisoned! (-5hp every turn)")
            time.sleep(2)

    elif special == "hit back":
        if random.random() < 0.3:
            print(f"\n{enemy_name} takes no damage and doubles its attack!")
            time.sleep(2)
            enemy_attack = random.randint(*opponent_list[enemy_name]["Attack"])
            extra_enemy_damage += 2 * enemy_attack
            return enemy_hp, 0, extra_enemy_damage

    enemy_hp -= player_damage

    return enemy_hp, player_damage, extra_enemy_damage


def random_opponent():
    return random.choice(list(opponent_list.keys()))


def flee_event():
    return random.choice(list(flee_events.keys()))


def random_event():
    return random.choice(list(random_events.keys()))


def get_attack_text():
    return random.choice(attack_texts)

# ^-------------------RANDOM--------------------------^


# Name input
def playername():
    clear()
    global game_state
    while game_state['GAME_RUNNING']:
        name = input("What's your name traveler?  ")
        game_state['PLAYER_NAME'] = name
        quiet_save_game(game_state)
        print(f"\nGoodluck, {game_state['PLAYER_NAME']}! :]")
        time.sleep(1.2)
        return playername


if game_state.get("PLAYER_NAME") is None:
    playername()
# Input to select weapon


def select_weapon():
    global game_state
    while game_state['GAME_RUNNING']:
        clear()
        print("-" * 64)
        print("Finest selection of weapons:")
        print(
            f"{'1.':<3} {'Wooden sword':<17} {'-':^5} {'3-11 dmg - Basic safe choice'}")
        print(f"{'2.':<3} {'Wooden spear':<17} {'-':^5} {'5-8  dmg - Another classic'}")
        print(
            f"{'3.':<3} {'Glass shard':<17} {'-':^5} {'0-3  dmg - Why would you pick that?'}")
        print(
            f"{'4.':<3} {'Magic coin':<17} {'-':^5} {'0 or 100 dmg - 10% chance to land'}")

        if "steelsw" in game_state['BOUGHT_WEAPONS']:
            print(f"{'5.':<3} {'Steel sword':<20} {'-':^5} {'10-17 dmg - Bought'}")
        if "steelax" in game_state['BOUGHT_WEAPONS']:
            print(f"{'6.':<3} {'Steel axe':<20} {'-':^5} {'13-20 dmg - Bought'}")
        if "ironmace" in game_state['BOUGHT_WEAPONS']:
            print(f"{'7.':<3} {'Iron mace':<20} {'-':^5} {'18-24 dmg - Bought'}")
        if "shiny infinity blade" in game_state['META_ITEMS']:
            print(
                f"{'8.':<3} {'Shiny infinity blade':<20} {'-':^5} {'60-120 dmg - Bought'}")
        if "world splitter" in game_state['META_ITEMS']:
            print(
                f"{'9.':<3} {'World splitter':<20} {'-':^5} {'200-400 dmg - Bought'}")

        print("-" * 64)
        weapon_choice = input("\nSelect your weapon: ").lower().strip()

        weapon_map = {
            "1": "wooden sword",
            "2": "wooden spear",
            "3": "glass shard",
            "4": "magic coin",
            "5": "steelsw",
            "6": "steelax",
            "7": "ironmace",
            "8": "shiny infinity blade",
            "9": "world splitter",
        }

        if weapon_choice in weapon_map:
            selected_key = weapon_map[weapon_choice]
            if (
                selected_key in ["wooden sword",
                                 "wooden spear", "glass shard", "magic coin"]
                or selected_key in game_state['BOUGHT_WEAPONS']
                or selected_key in game_state.get('META_ITEMS', [])
            ):
                selected_weapon = inventory_items[selected_key]
                selected_weapon_name = selected_weapon["Title"]
                print(f"\nYou selected {selected_weapon_name}!\n")
                game_state["SELECTED_WEAPON"] = selected_key
                quiet_save_game(game_state)
                time.sleep(1)
                break
            else:
                print("\nYou haven't unlocked that weapon yet!")
                time.sleep(1)

        elif weapon_choice == "no":
            clear()
            print("ok piss off :]")
            time.sleep(1.2)
            for i in range(10):
                time.sleep(0.05)
                print("die :]" * i)
            time.sleep(2)
            print("\nokay i apologise that was immature, love xoxo")
            time.sleep(2)
            clear()

        else:
            print("\n\nInvalid weapon choice.")
            time.sleep(1.2)
            clear()


# Weapon selection only if not loaded
if game_state.get("SELECTED_WEAPON") is None:
    select_weapon()
else:
    selected_key = game_state["SELECTED_WEAPON"]
    selected_weapon = inventory_items.get(selected_key)
    if selected_weapon:
        selected_weapon_name = selected_weapon["Title"]

game_state["ENCHANTMENT_SELECTION"] = True


def select_enchantment():
    global game_state

    if 'PLAYER_ENCHANTMENTS' not in game_state or not isinstance(game_state['PLAYER_ENCHANTMENTS'], list):
        game_state['PLAYER_ENCHANTMENTS'] = []

    if 'SELECTED_ENCHANTMENTS' not in game_state or not isinstance(game_state['SELECTED_ENCHANTMENTS'], list):
        game_state['SELECTED_ENCHANTMENTS'] = []

    while game_state['ENCHANTMENT_SELECTION']:
        clear()
        print("-" * 64)
        print("Select your enchantment:")
        print(
            f"{'1.':<3} {'Vampirism':<17} {'-':^5} {'Health regen 0.2x per killed enemy hp'}")
        print(f"{'2.':<3} {'Critical Attacks':<17} {'-':^5} {'10% chance per attack'}")
        print(f"{'3.':<3} {'Theft':<17} {'-':^5} {'Gain 20% more coins'}")
        print(f"{'4.':<3} {'Experienced':<17} {'-':^5} {'Gain 15% more XP'}")
        print("-" * 64)

        selection = input("\nSelect your enchantment:  ").lower().strip()

        if 'SELECTED_ENCHANTMENTS' not in game_state or not isinstance(game_state['SELECTED_ENCHANTMENTS'], list):
            game_state['SELECTED_ENCHANTMENTS'] = []

        if selection in ("vampirism", "1"):
            if "vampirism I" not in game_state['SELECTED_ENCHANTMENTS']:
                game_state['PLAYER_ENCHANTMENTS'].append("vampirism I")
                game_state['SELECTED_ENCHANTMENTS'].append("vampirism I")
            game_state['ENCHANTMENT_SELECTION'] = False
            print("\nVampirism enchantment added.")
            time.sleep(1)
            quiet_save_game(game_state)
        elif selection in ("critical attacks", "critical", "2"):
            if "critical" not in game_state['SELECTED_ENCHANTMENTS']:
                game_state['PLAYER_ENCHANTMENTS'].append("critical")
                game_state['SELECTED_ENCHANTMENTS'].append("critical")
            game_state['ENCHANTMENT_SELECTION'] = False
            print("\nCritical attacks enchantment added.")
            time.sleep(1)
            quiet_save_game(game_state)
        elif selection in ("theft", "3"):
            if "theft" not in game_state['SELECTED_ENCHANTMENTS']:
                game_state['PLAYER_ENCHANTMENTS'].append("theft")
                game_state['SELECTED_ENCHANTMENTS'].append("theft")
            game_state['ENCHANTMENT_SELECTION'] = False
            print("\nTheft enchantment added.")
            time.sleep(1)
            quiet_save_game(game_state)
        elif selection in ("experienced", "4"):
            if "experienced" not in game_state['SELECTED_ENCHANTMENTS']:
                game_state['PLAYER_ENCHANTMENTS'].append("experienced")
                game_state['SELECTED_ENCHANTMENTS'].append("experienced")
            game_state['ENCHANTMENT_SELECTION'] = False
            print("\nExperienced enchantment added.")
            time.sleep(1)
            quiet_save_game(game_state)
        else:
            print("\nInvalid enchantment choice.")
            time.sleep(1.2)


if not game_state.get('SELECTED_ENCHANTMENTS'):
    game_state['ENCHANTMENT_SELECTION'] = True
    game_state["SELECTED_ENCHANTMENTS"] = []
    select_enchantment()
else:
    game_state['ENCHANTMENT_SELECTION'] = False
    for ench in game_state['SELECTED_ENCHANTMENTS']:
        if ench not in game_state['PLAYER_ENCHANTMENTS']:
            game_state['PLAYER_ENCHANTMENTS'].append(ench)

# ^---------------STARTING SELECTION-----------------------^

# Money reward per kill


def reward(opponent):
    global game_state
    base_reward = random.randint(*opponent["Reward"])
    bonus = 0
    if "theft" in game_state['PLAYER_ENCHANTMENTS']:
        bonus = int(base_reward * enchantments["theft"]["Bonus"])
    total = base_reward + bonus
    game_state['COIN_BALANCE'] += total
    game_state['TOTAL_COINS_EARNED'] += total
    quiet_save_game(game_state)
    return total


def apply_vampirism(damage):
    global game_state
    if "vampirism I" in game_state['PLAYER_ENCHANTMENTS']:
        regen = int(damage * enchantments["vampirism I"]["Health_regen"])
        game_state['PLAYER_HEALTH'] = min(
            game_state['PLAYER_HEALTH'] + regen, game_state['MAX_HEALTH'])
    if "vampirism II" in game_state['PLAYER_ENCHANTMENTS']:
        regen = int(damage * enchantments["vampirism II"]["Health_regen"])
        game_state['PLAYER_HEALTH'] = min(
            game_state['PLAYER_HEALTH'] + regen, game_state['MAX_HEALTH'])
        return regen
    return 0

# Deducting health to the opponent


def attack(opponent_name, opponent):
    global game_state

    selected_weapon_key = game_state.get("SELECTED_WEAPON")
    if not selected_weapon_key:
        print("No weapon selected!")
        return

    selected_weapon = inventory_items.get(selected_weapon_key)
    if not selected_weapon:
        print("Selected weapon data missing!")
        return

    if selected_weapon["Title"] == "magic coin":
        player_attack = magic_coin_attack()
    else:
        attack_range = selected_weapon["Attack"]
        player_attack = random.randint(*attack_range)

    forge_upgrades = game_state.get('FORGE_UPGRADES', [])
    forge_upgrades_lower = [u.lower() for u in forge_upgrades]

    sharpness_count = forge_upgrades_lower.count("sharpness")
    player_attack = int(player_attack * (1 + 0.15 * sharpness_count))

    flame_count = forge_upgrades_lower.count("flame")
    player_attack += 15 * flame_count

    poison_count = forge_upgrades_lower.count("poison")
    player_attack += 20 * poison_count

    power_count = forge_upgrades_lower.count("power")
    player_attack += 50 * power_count

    player_attack += game_state.get('DAMAGE_UPGRADE', 0)

    # Calculate crit chance from player enchantments in game_state
    crit_chance = 0
    if "critical" in game_state.get('PLAYER_ENCHANTMENTS', []):
        crit_chance += 0.10
    if "iron gloves" in game_state.get('PLAYER_ENCHANTMENTS', []):
        crit_chance += 0.05

    # Apply critical hit
    if crit_chance > 0 and random.random() < crit_chance:
        print("\n\nCritical Hit!")
        player_attack *= 2

    return player_attack
# ^-------------------CRITICAL ATTACK--------------------------^


# flee
def flee_mechanic():
    global game_state
    clear()
    event = flee_event()
    print(f"You fled the battle! {flee_events[event]['message']}")
    if event == "coindrop":
        if "swiftness" in game_state["PLAYER_ENCHANTMENTS"]:
            clear()
            print("Nothing happens since you've drank swiftness potion")
        else:
            lost_coins = random.randint(10, 45)
            game_state["COIN_BALANCE"] = max(
                0, game_state["COIN_BALANCE"] - lost_coins)
            print(f"You dropped {lost_coins} coins while fleeing!")
            quiet_save_game(game_state)
            time.sleep(1)
            return
    elif event == "otheropp":
        time.sleep(1)
        clear()
        combat_mechanic()
        return
    if "swiftness" in game_state["PLAYER_ENCHANTMENTS"]:
        clear()
        print("Nothing happens since you've drank swiftness potion")
    else:
        game_state['PLAYER_HEALTH'] -= flee_events[event]['health_penalty']
        quiet_save_game(game_state)
    if game_state['PLAYER_HEALTH'] < 0:
        time.sleep(1)
        death()
        quiet_save_game(game_state)

# ^-------------------FLEEING EVENT--------------------------^


def shrine_event():
    global game_state
    clear()
    print("Golden frog says: I can give you an enchanment for a small fee of 15c!")
    option = input("\n\nDo you want it? (y/n)  ").lower().strip()

    if option == "y" or option == "yes":
        time.sleep(1)
        if game_state["COIN_BALANCE"] >= 15:
            game_state["COIN_BALANCE"] -= 15
            clear()
            game_state['ENCHANTMENT_SELECTION'] = True
            select_enchantment()
            quiet_save_game(game_state)
        else:
            clear()
            print("You can't afford it man. Here I'll give you 5c I feel bad for you")
            game_state["COIN_BALANCE"] += 5
            game_state['TOTAL_COINS_EARNED'] += 5
            quiet_save_game(game_state)

    elif option == "n" or option == "no":
        time.sleep(1)
        clear()
        print("Well, your loss.")
        time.sleep(1)

# ^-------------------SHRINE EVENT--------------------------^


def dice_game():
    global game_state
    input("\nPress enter to roll your dice.")
    clear()
    for _ in range(1):
        time.sleep(1)
        player_roll = random.randint(1, 6)
        print(f"You rolled: {player_roll}")
        print("\nNow it's opponent's turn")

    for _ in range(1):
        time.sleep(2)
        opponent_roll = random.randint(1, 6)
        print(f"\nOpponent rolled: {opponent_roll}")
        time.sleep(2)
        if player_roll > opponent_roll:
            print("\nYou've won! You gain 15xp and 50c")
            time.sleep(2)
            game_state['XP'] += 15
            game_state['TOTAL_XP'] += 15
            game_state["COIN_BALANCE"] += 50
            game_state['TOTAL_COINS_EARNED'] += 50
        elif player_roll < opponent_roll:
            print(
                "\nYou've lost! \n\nYou get laughed at which hurts your ego. You've lost 5 health")
            time.sleep(2)
            game_state['PLAYER_HEALTH'] -= 5
            quiet_save_game(game_state)
            if game_state['PLAYER_HEALTH'] <= 0:
                death()
                quiet_save_game(game_state)
        else:
            print("\nIt's a tie! Try again")
            time.sleep(2)
            dice_game()

# ^-------------------DICE EVENT--------------------------^


def generate_winning_numbers():
    return random.sample(range(1, 9), 3)


def generate_scratch_numbers():
    return [random.randint(1, 9) for _ in range(6)]


def display_card(scratched, revealed):
    display = ""
    for i in range(6):
        if scratched[i]:
            display += f"[{revealed[i]}] "
        else:
            display += "[?] "
    print(display.strip())


def scratcher():
    global game_state
    winning = generate_winning_numbers()
    scratch_numbers = generate_scratch_numbers()
    scratched = [False] * 6
    revealed = [None] * 6
    print(f"Winning Numbers: {sorted(winning)}\n")

    total_scratched = 0

    while total_scratched < 6:
        clear()
        print("=== SCRATCHER MINI-GAME ===")
        print(f"Winning Numbers: {sorted(winning)}\n")
        print("Your Card:")
        display_card(scratched, revealed)
        try:
            choice = int(input("\nScratch a slot (1-6): "))
            if 1 <= choice <= 6:
                idx = choice - 1
                if scratched[idx]:
                    print("\nThat slot is already scratched.")
                    time.sleep(1)
                else:
                    scratched[idx] = True
                    revealed[idx] = scratch_numbers[idx]
                    total_scratched += 1
            else:
                print("\nChoose a number between 1 and 6.")
                time.sleep(1)
        except ValueError:
            clear()
            print("Invalid input. Use digits 1–6 only.")
            time.sleep(1)

        print()
    clear()
    print("All numbers scratched!")
    print("\nYour Numbers:", revealed)
    matches = [n for n in revealed if n in winning]
    print("Matching Numbers:", matches)
    payout = 15 * len(matches)
    game_state["COIN_BALANCE"] += payout
    game_state['TOTAL_COINS_EARNED'] += payout
    print(f"Total Matches: {len(matches)}",
          f"\n\n- YOU WIN {payout}c! (15c per match)" if len(matches) > 0 else "- No luck this time.")
    quiet_save_game(game_state)

# ^-------------------SCRATCHER EVENT--------------------------^


def trigger_event(revent):
    global game_state
    clear()
    print("Random event!")
    print(random_events[revent]["Message"])
    time.sleep(2.2)

    if revent == "dice":
        dice_game()

    elif revent == "shrine":
        shrine_event()

    elif revent == "trap":
        game_state['PLAYER_HEALTH'] -= 10
        if game_state['PLAYER_HEALTH'] <= 0:
            death()
            quiet_save_game(game_state)

    elif revent == "scratcher":
        scratcher()

# ^-------------------ALL RANDOM EVENTS--------------------------^


def low_health():
    if game_state['PLAYER_HEALTH'] <= (0.2 * game_state['MAX_HEALTH']):
        return "!!!"
    return ""


def combat_mechanic():
    global game_state

    if random.random() < 0.15:
        clear()
        revent = random_event()
        trigger_event(revent)
        return

    opponent_name = random_opponent()
    opponent = copy.deepcopy(opponent_list[opponent_name])

    if "Base_Attack" not in opponent:
        opponent["Base_Attack"] = opponent.get("Attack", [0, 0])

    difficulty = calculate_difficulty()

    # Scale attack range
    opponent["Attack"] = [
        int(opponent["Base_Attack"][0] * difficulty),
        int(opponent["Base_Attack"][1] * difficulty)
    ]

    clear()
    print("-" * 64)
    print(f"A {opponent_name} appeared!")
    time.sleep(0.7)

    if game_state['PLAYER_HEALTH'] <= 0:
        time.sleep(0.5)
        death()
        quiet_save_game(game_state)
        return

    # Scale health by difficulty
    difficulty = calculate_difficulty()
    opponent["Health"] = int(opponent["Base_Health"] * difficulty)
    opponent["Max_Health"] = opponent["Health"]  # store max HP

    while opponent["Health"] > 0:
        if not game_state['GAME_RUNNING']:
            break

        print("\nMake your choice: \n1. Attack \n2. Defend\n3. Use item\n4. Flee")
        print("-" * 64)

        choice = input("\nEnter your choice: ").lower().strip()

        if choice == "1" or choice == "attack":
            player_attack = attack(opponent_name, opponent)
            difficulty = calculate_difficulty()

            # Update scaled attack every turn if you want dynamic difficulty scaling
            opponent["Attack"] = [
                int(opponent["Base_Attack"][0] * difficulty),
                int(opponent["Base_Attack"][1] * difficulty)
            ]

            opponent["Health"], player_attack, extra_enemy_damage = apply_enemy_special(
                opponent_name, opponent["Health"], opponent["Max_Health"], player_attack, game_state)

            if opponent["Health"] <= 0:
                clear()
                print(f"You defeated the {opponent_name}!")
                print(f"You gained {opponent['XP']} XP!")
                coins_earned = reward(opponent)
                print(f"You gained {coins_earned}c!")
                game_state['XP'] += opponent['XP']
                game_state['TOTAL_XP'] += opponent['XP']
                game_state['KILL_COUNT'] += 1
                game_state["BLEEDING"] = False
                game_state["VENOM"] = False
                time.sleep(1.5)
                return

            print(
                f"\nYou {get_attack_text()} the {opponent_name} and dealt {player_attack} damage!")
            time.sleep(1.2)
            clear()

            opp_damage = opp_attack(opponent)
            print("-" * 64)
            print(f"{opponent_name} hits you back and deals {opp_damage} damage!")
            game_state['PLAYER_HEALTH'] -= opp_damage
            game_state['PLAYER_HEALTH'] = max(game_state['PLAYER_HEALTH'], 0)

            # Status effects damage
            if game_state.get("BLEEDING"):
                game_state["PLAYER_HEALTH"] -= 5
                if game_state["PLAYER_HEALTH"] <= 0:
                    time.sleep(0.5)
                    death()
                    quiet_save_game(game_state)
                    return

            if game_state.get("VENOM"):
                game_state["PLAYER_HEALTH"] -= 5
                if game_state["PLAYER_HEALTH"] <= 0:
                    time.sleep(0.5)
                    death()
                    quiet_save_game(game_state)
                    return

            if opponent["Health"] > 0:
                print(
                    f"\n{opponent_name}'s remaining health: {hp_bar(opponent['Health'], opponent['Max_Health'])}")
                warning = low_health()
                print(f"\nYour remaining health: {game_state['PLAYER_HEALTH']}/{game_state['MAX_HEALTH']}" + (
                    f" {warning}" if warning else ""))
                if game_state['PLAYER_HEALTH'] <= 0:
                    time.sleep(0.5)
                    death()
                    quiet_save_game(game_state)
                    return

        elif choice == "2" or choice == "defend":
            time.sleep(1)
            opp_damage = opp_attack(opponent) // 2
            print(
                f"\nYou chose to defend! Damage was reduced to {opp_damage}.")
            game_state['PLAYER_HEALTH'] -= opp_damage
            game_state['PLAYER_HEALTH'] -= extra_enemy_damage
            game_state['PLAYER_HEALTH'] = max(game_state['PLAYER_HEALTH'], 0)

            if game_state.get("BLEEDING"):
                game_state["PLAYER_HEALTH"] -= 5
                print("You are bleeding... (-5 HP)")
                if game_state["PLAYER_HEALTH"] <= 0:
                    time.sleep(0.5)
                    death()
                    quiet_save_game(game_state)
                    return

            if game_state.get("VENOM"):
                game_state["PLAYER_HEALTH"] -= 5
                print("You're suffering from venom... (-5 HP)")
                if game_state["PLAYER_HEALTH"] <= 0:
                    time.sleep(0.5)
                    death()
                    quiet_save_game(game_state)
                    return

            quiet_save_game(game_state)
            time.sleep(1)
            if game_state['PLAYER_HEALTH'] <= 0:
                time.sleep(1)
                death()
                quiet_save_game(game_state)
                return
            clear()

        elif choice in ("3", "use item", "item"):
            time.sleep(1)
            clear()
            owned_items = game_state['BOUGHT_ITEMS']
            counts = {}
            for item in owned_items:
                counts[item] = counts.get(item, 0) + 1

            formatted_items = [f"{item} x{count}" if count >
                               1 else item for item, count in counts.items()]
            print("Your items:\n\n" + "\n".join(word.capitalize()
                  for word in formatted_items))
            use = input("\nSelect your choice:  ").lower().strip()

            if use == "dagger":
                game_state['BOUGHT_ITEMS'].remove("dagger")
                opponent["Health"] -= 15
                print(
                    f"\n15 dmg dealt! {opponent_name}'s remaining health: {hp_bar(opponent['Health'], opponent['Max_Health'])}")
                time.sleep(1.75)
                clear()
                quiet_save_game(game_state)

            elif use == "bomb":
                game_state['BOUGHT_ITEMS'].remove("bomb")
                opponent["Health"] -= 50
                print(
                    f"\n50 dmg dealt! {opponent_name}'s remaining health: {hp_bar(opponent['Health'], opponent['Max_Health'])}")
                time.sleep(2)
                clear()
                quiet_save_game(game_state)

            elif use == "health potion":
                game_state['BOUGHT_ITEMS'].remove("health potion")
                game_state['PLAYER_HEALTH'] += 25
                print(
                    f"\n25hp healed! Current health: {game_state['PLAYER_HEALTH']}")
                time.sleep(2)
                clear()
                quiet_save_game(game_state)

            else:
                print("\nUnknown choice")
                time.sleep(1.75)
                clear()

        elif choice == "4" or choice == "flee":
            game_state["BLEEDING"] = False
            game_state["VENOM"] = False
            time.sleep(0.5)
            clear()
            flee_mechanic()
            time.sleep(1)
            break

        elif choice == "suicide":
            opt2 = input("\nAre you sure? (y/n)  ").lower().strip()
            if opt2 in ("y", "yes"):
                clear()
                print("\nYou kill yourself...")
                time.sleep(2)
                game_state['PLAYER_HEALTH'] = 0
                death()
                quiet_save_game(game_state)
            else:
                pass
        else:
            print("\nInvalid command.")
            time.sleep(1)
            clear()
# ^-------------------PVP--------------------------^


def achievements():
    misc = game_state['ACHIEVEMENTS']["MISCELLANEOUS"]
    total_achievements = 15

    # Killed
    killed = game_state['ACHIEVEMENTS']["KILLED"]
    if game_state['KILL_COUNT'] >= 1 and "- First blood - kill your first enemy" not in killed:
        killed.append("- First blood - kill your first enemy")
    if game_state['KILL_COUNT'] >= 10 and "- Beginner warrior - kill 10 enemies" not in killed:
        killed.append("- Beginner warrior - kill 10 enemies")
    if game_state['KILL_COUNT'] >= 25 and "- Combat veteran - kill 25 enemies" not in killed:
        killed.append("- Combat veteran - kill 25 enemies")
    if game_state['KILL_COUNT'] >= 50 and "- Experienced fighter - kill 50 enemies" not in killed:
        killed.append("- Experienced fighter - kill 50 enemies")
    if game_state['KILL_COUNT'] >= 100 and "- Battle scar man - kill 100 enemies" not in killed:
        killed.append("- Battle scar man - kill 100 enemies")

    # Coins
    coins = game_state['ACHIEVEMENTS']["COINS EARNED"]
    if game_state['TOTAL_COINS_EARNED'] >= 500 and "- Starting out - earn your first 500c" not in coins:
        coins.append("- Starting out - earn your first 500c")
    if game_state['TOTAL_COINS_EARNED'] >= 1000 and "- Getting there - earn total of 1000c" not in coins:
        coins.append("- Getting there - earn total of 1000c")
    if game_state['TOTAL_COINS_EARNED'] >= 2000 and "- Rich - earn total of 2000c" not in coins:
        coins.append("- Rich - earn total of 2000c")
    if game_state['TOTAL_COINS_EARNED'] >= 5000 and "- Bank breaker - earn total of 5000c" not in coins:
        coins.append("- Bank breaker - earn total of 5000c")

    # Miscellaneous
    misc = game_state['ACHIEVEMENTS']["MISCELLANEOUS"]
    if game_state.get('SELECTED_DIFFICULTY') == "hard" and "- Masochist - select hard difficulty" not in misc:
        misc.append("- Masochist - select hard difficulty")
    if game_state.get('SELECTED_DIFFICULTY') == "easy" and "- Little baby - select easy difficulty" not in misc:
        misc.append("- Little baby - select easy difficulty")
    if game_state.get('SELECTED_DIFFICULTY') == "normal" and "- Normie - select normal difficulty" not in misc:
        misc.append("- Normie - select normal difficulty")
    if game_state.get('CHEATED', False) is True and "- Game breaker - cheat in a game" not in misc:
        misc.append("- Game breaker - cheat in a game")
    if game_state['ALCOHOL_CONSUMED'] >= 10 and "- Junkie - drink over 10 alcohol beverages" not in misc:
        misc.append("- Junkie - drink over 10 alcohol beverages")
    if game_state.get('MAGIC_SHIELD') is True and "- Blessed - buy a magic shield" not in misc:
        misc.append("- Blessed - buy a magic shield")
    if game_state.get('MAX_HEALTH', 0) >= 200 and "- Tough skin - double your starting max health" not in misc:
        misc.append("- Tough skin - double your starting max health")
    if game_state.get('GAMBLED') is True and "- Gambler - gable at the tavern" not in misc:
        misc.append("- Gambler - gable at the tavern")
    if game_state.get('UNLOCKED_CHEST') is True and "- Lockpicker - successfully open a chest" not in misc:
        misc.append("- Lockpicker - successfully open a chest")
    if game_state.get('CAVE_ENTERED') is True and "- Caveman - enter the cursed cave" not in misc:
        misc.append("- Caveman - enter the cursed cave")

    # Count achievements WITHOUT Completionist
    earned_achievement_count = sum(
        len([a for a in category if "Completionist" not in a])
        for category in game_state['ACHIEVEMENTS'].values()
    )

    # Add Completionist if earned all others
    if earned_achievement_count == total_achievements - 1 and "- Completionist - earn every possible achievement" not in misc:
        misc.append("- Completionist - earn every possible achievement")

    # Count achievements INCLUDING Completionist for display
    earned_achievement_count = sum(
        len(category) for category in game_state['ACHIEVEMENTS'].values())

    # display
    clear()
    print(
        f"Your achievements: {earned_achievement_count}/{total_achievements}")
    for category, entries in game_state['ACHIEVEMENTS'].items():
        if entries:
            print(f"\n=========== {category} ===========")
            for achievement in entries:
                print(achievement)

    if earned_achievement_count == total_achievements and game_state['MASTERY'] is False:
        mastery()

    input("\nPress Enter to return to the main menu...")


def mastery():
    print("-" * 64)
    print(
        f"\nCongratulations. You've earned all possible achievements.\n\nI'm proud of you {game_state['PLAYER_NAME']} - ash, the dev")
    print("\nAs a token of my appreciation you can choose to increase your attack by 10,000dmg")
    choice = input("\nWould you like to? (y/n)  ")
    if choice == "yes" or choice == "y":
        game_state['DAMAGE_UPGRADE'] += 10000
        print("\nDone. You deserve it <3")
        game_state['MASTERY'] = True
        time.sleep(2)
    elif choice == "no" or choice == "n":
        choice = input("\nAre you ABSOLUTELY sure you DON'T want it? (y/n)  ")
        if choice == "yes" or choice == "y":
            print("\nWell... I understand. Goodluck on your further journey :D")
            game_state['MASTERY'] = True
            time.sleep(2)
        else:
            print("\nUnknown option")
            time.sleep(1)
            clear()
            mastery()
    else:
        print("\nUnknown option")
        time.sleep(1)
        clear()
        mastery()


# ^-------------------ACHIEVEMENTS--------------------------^


def lvl_rewards():
    global game_state

    if "CLAIMED_LVL" not in game_state:
        game_state["CLAIMED_LVL"] = []

    level = game_state['TOTAL_XP'] // 150
    clear()
    print(
        "Rewards roadmap:"
        "\nLVL - 5: 200c | Higher bets unlocked"
        "\nLVL - 10: Iron mace | Forge unlocked"
        "\nLVL - 15: Cursed cave unlocked"
    )

    claimed_any = False
    # lvl5
    if level >= 5 and "lvl5" not in game_state['CLAIMED_LVL']:
        print("\nReward available for LVL 5")
        opt = input("Collect? (y/n) ").lower().strip()
        if opt == "y" or opt == "yes":
            game_state['COIN_BALANCE'] += 200
            game_state['TOTAL_COINS_EARNED'] += 200
            game_state['CLAIMED_LVL'].append("lvl5")
            print("\n100c claimed.")
            claimed_any = True
            time.sleep(1)
    # lvl10
    if level >= 10 and "lvl10" not in game_state['CLAIMED_LVL']:
        print("\nReward available for LVL 10")
        opt = input("Collect? (y/n) ").lower().strip()
        if opt == "y" or opt == "yes":
            game_state["BOUGHT_WEAPONS"].append("ironmace")
            game_state['CLAIMED_LVL'].append("lvl10")
            print("\nIron mace claimed.")
            claimed_any = True
            time.sleep(1)
    # lvl15
    if level >= 15 and "lvl15" not in game_state['CLAIMED_LVL']:
        print("\nReward available for LVL 15")
        opt = input("Collect? (y/n) ").lower().strip()
        if opt == "y" or opt == "yes":
            game_state['CLAIMED_LVL'].append("lvl15")
            print("\nCursed cave unlocked.")
            claimed_any = True
            time.sleep(1)

    if not claimed_any:
        print("\nNo rewards available to claim.")
        input("\nPress Enter to return to the main menu...")


def progress(length=10):
    global game_state
    xp_per_square = 15
    xp_per_level = length * xp_per_square

    level = game_state['TOTAL_XP'] // xp_per_level  # Total levels gained
    # XP toward next level
    xp_in_current_level = game_state['TOTAL_XP'] % xp_per_level
    filled = xp_in_current_level // xp_per_square  # Squares to fill in current level
    percent = int((filled / length) * 100)
    pbar = '■' * filled + '-' * (length - filled)
    togo_c = 10 - filled
    togo = togo_c * 15
    print(f"LVL: ({level})")
    print(f"\nProgress: ⎣{pbar}⎦ {percent}%")
    print(f"\n> {togo}xp to go for lvl ({level + 1})!")
    choice = input(
        '\nType in "rewards" or "achievements" to check them, else press enter: ').lower().strip()
    if choice == "rewards":
        time.sleep(1)
        clear()
        lvl_rewards()
    elif choice == "achievements":
        time.sleep(1)
        clear()
        achievements()
    else:
        print("\nInvalid command")
        time.sleep(1)
        clear()

# ^-------------------XP REWARDS--------------------------^


def get_level(length=10):
    global game_state
    xp_per_square = 15
    xp_per_level = length * xp_per_square
    level = game_state['TOTAL_XP'] // xp_per_level
    return level

# ^-------------------GET LEVEL--------------------------^


def rest():
    global game_state
    print("-" * 64)
    print(
        "Choose your rest amount:\n1. Short nap - 10xp | 15hp\n2. Proper nap - 20xp | 25hp \n3. Healthy Sleep - 25xp | 30hp")
    print("-" * 64)
    print(f"\nYour xp: {game_state['XP']}")
    option = input("\nSelect your option:  ").lower().strip()
    # short nap
    if option == "1" or option.lower().strip() == "short nap":
        if game_state['XP'] < 10:
            print("\nNot enough XP to rest!")
            return
        if game_state['PLAYER_HEALTH'] >= game_state['MAX_HEALTH']:
            print("\nYou already have full health!")
            return
        game_state['XP'] -= 10
        game_state['PLAYER_HEALTH'] += 15
        if game_state['PLAYER_HEALTH'] > game_state['MAX_HEALTH']:
            game_state['PLAYER_HEALTH'] = game_state['MAX_HEALTH']
        print("\nYou took a Short nap and regained 15 health.")
    # proper nap
    elif option == "2" or option.lower().strip() == "proper nap":
        if game_state['XP'] < 20:
            print("\nNot enough XP to rest!")
            return
        if game_state['PLAYER_HEALTH'] >= game_state['MAX_HEALTH']:
            print("\nYou already have full health!")
            return
        game_state['XP'] -= 20
        game_state['PLAYER_HEALTH'] += 25
        if game_state['PLAYER_HEALTH'] > game_state['MAX_HEALTH']:
            game_state['PLAYER_HEALTH'] = game_state['MAX_HEALTH']
        print("\nYou took a Proper nap and regained 25 health.")
    # healthy sleet
    elif option == "3" or option.lower().strip() == "healthy sleep":
        if game_state['XP'] < 25:
            print("\nNot enough XP to rest!")
            return
        if game_state['PLAYER_HEALTH'] >= game_state['MAX_HEALTH']:
            print("\nYou already have full health!")
            return
        game_state['XP'] -= 25
        game_state['PLAYER_HEALTH'] += 30
        if game_state['PLAYER_HEALTH'] > game_state['MAX_HEALTH']:
            game_state['PLAYER_HEALTH'] = game_state['MAX_HEALTH']
        print("\nYou had a Healthy Sleep and regained 30 health.")
    else:
        print("\nInvalid rest option.")
        time.sleep(1)

# ^-------------------REST--------------------------^


def shop():
    global game_state
    clear()
    print("-" * 64)
    print("Welcome to the shop! You can upgrade or buy things here\n")

    print(f"{'No':<3} {'Item':<40} {'Cost':>10}")
    print("-" * 64)
    print(
        f"{'1.':<3} {f'Max health upgrade {game_state['MAX_HEALTH']} → {game_state['MAX_HEALTH'] + 50}':<40} {'50c':>10}")
    print(f"{'2.':<3} {'Coins to Health exchange':<40} {'5>1':>10}")
    print(f"{'3.':<3} {'Damage upgrade +5 dmg':<40} {'50c':>10}")
    print(f"{'4.':<3} {'Magic scroll - 50% dmg reduction':<40} {'100c':>10}")
    print(f"{'5.':<3} {'Potion of swiftness - ???':<40} {'25c':>10}")
    print(f"{'6.':<3} {'Steel sword - 10-17 dmg':<40} {'35c':>10}")
    print(f"{'7.':<3} {'Steel axe - 13-20 dmg':<40} {'45c':>10}")
    print(f"{'8.':<3} {'Bloody ring - ???':<40} {'75c':>10}")
    print(f"{'9.':<3} {'Dusty book - ???':<40} {'75c':>10}")
    print(f"{'10.':<3} {'Iron gloves - ???':<40} {'50c':>10}")
    print(f"{'11.':<3} {'Health potion - heals 25hp':<40} {'20c':>10}")
    print(f"{'12.':<3} {'Dagger - deals 15dmg':<40} {'10c':>10}")
    print(f"{'13.':<3} {'Bomb - deals 50dmg':<40} {'25c':>10}")
    print("-" * 64)
    print(f"Your balance: {game_state["COIN_BALANCE"]}c")

    optionn = input('\nSelect your option or type in "quit" to exit:  ')

    if optionn == "1":
        if game_state["COIN_BALANCE"] >= 50:
            game_state["COIN_BALANCE"] -= 50
            game_state['MAX_HEALTH'] += 50
            print("\nPurchase completed.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins to purchase.")
            time.sleep(1)
            shop()

    elif optionn == "2":
        try:
            amount = int(
                input("\nHow many coins would you like to exchange? "))
            if amount % 5 != 0:
                print("\nYou must exchange coins in multiples of 5.")
                time.sleep(1)
                shop()
            elif amount > game_state["COIN_BALANCE"]:
                print("\nNot enough coins.")
                time.sleep(1)
                shop()
            else:
                gained_health = amount // 5
                game_state['PLAYER_HEALTH'] = min(
                    game_state['PLAYER_HEALTH'] + gained_health, game_state['MAX_HEALTH'])
                game_state["COIN_BALANCE"] -= amount
                print(f"\nExchanged {amount} coins for {gained_health} HP.")
                quiet_save_game(game_state)
                time.sleep(1)
                shop()
        except ValueError:
            print("\nInvalid input. Please enter a number.")
            time.sleep(1)
            shop()

    elif optionn == "3":
        if game_state["COIN_BALANCE"] >= 50:
            game_state["COIN_BALANCE"] -= 50
            game_state['DAMAGE_UPGRADE'] += 5
            print("\nDamage upgraded by +5.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "4":
        if game_state['MAGIC_SHIELD'] == True:
            print("\nYou already have magic shield powers.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 100:
            game_state["COIN_BALANCE"] -= 100
            game_state['MAGIC_SHIELD'] = True
            print("\nYou gained magic shield powers. Damage reduced by 50%.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "5":
        if "swiftness" in game_state['PLAYER_ENCHANTMENTS']:
            print("\nYou already drank the potion of swiftness.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 25:
            game_state["COIN_BALANCE"] -= 25
            game_state['PLAYER_ENCHANTMENTS'].append("swiftness")
            print("\nYou drink the potion and feel like you can flee from any dire situation. Fleeing doesn't deal damage.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "6":
        if "steelsw" in game_state['BOUGHT_WEAPONS']:
            print("\nYou already have it.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 35:
            game_state["COIN_BALANCE"] -= 35
            game_state['BOUGHT_WEAPONS'].append("steelsw")
            print("\nYou've acquired the steel sword. Select the weapon in the menu.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "7":
        if "steelax" in game_state['BOUGHT_WEAPONS']:
            print("\nYou already have it.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 45:
            game_state["COIN_BALANCE"] -= 45
            game_state['BOUGHT_WEAPONS'].append("steelax")
            print("\nYou've acquired the steel axe. Select the weapon in the menu.")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "8":
        if "vampirism II" in game_state['PLAYER_ENCHANTMENTS']:
            print("\nYou already have it.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 75:
            game_state["COIN_BALANCE"] -= 75
            game_state['PLAYER_ENCHANTMENTS'].append("vampirism II")
            print("\nYou've acquired bloody ring. + 15% vampirism")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "9":
        if "dustybook" in game_state['PLAYER_ENCHANTMENTS']:
            print("\nYou already have it.")
            time.sleep(1)
        elif game_state["COIN_BALANCE"] >= 75:
            game_state["COIN_BALANCE"] -= 75
            game_state['PLAYER_ENCHANTMENTS'].append("dustybook")
            print("\nYou read the dusty book and gain ancient knowledge. + 25% xp boost")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "10":
        if "irongloves" in game_state['PLAYER_ENCHANTMENTS']:
            print("\nYou already have it.")
            time.sleep(1)
            shop()
        elif game_state["COIN_BALANCE"] >= 50:
            game_state["COIN_BALANCE"] -= 50
            game_state['PLAYER_ENCHANTMENTS'].append("irongloves")
            print("\nYou put iron gloves on. +5% critical attack chance")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "11":
        if game_state["COIN_BALANCE"] >= 20:
            game_state["COIN_BALANCE"] -= 20
            game_state['BOUGHT_ITEMS'].append("health potion")
            print("\nHealth potion added to your inventory")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "12":
        if game_state["COIN_BALANCE"] >= 10:
            game_state["COIN_BALANCE"] -= 10
            game_state['BOUGHT_ITEMS'].append("dagger")
            print("\nDagger added to your inventory")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "13":
        if game_state["COIN_BALANCE"] >= 25:
            game_state["COIN_BALANCE"] -= 25
            game_state['BOUGHT_ITEMS'].append("bomb")
            print("\nBomb added to your inventory")
            quiet_save_game(game_state)
            time.sleep(1)
            shop()
        else:
            print("\nNot enough coins.")
            time.sleep(1)
            shop()

    elif optionn == "quit" or optionn == "exit":
        return

    else:
        print("\nInvalid option.")
        shop()

    clear()
# ^-------------------SHOP--------------------------^


def tavern():
    clear()
    print("Welcome to the tavern!")
    opt3 = input(
        "\n1. Bar\n2. Gambling\n3. Quit\n\nSelect your option:  ").lower().strip()
    if opt3 == "1" or opt3 == "bar":
        time.sleep(1)
        clear()
        bar()
    elif opt3 == "2" or opt3 == "gambling":
        time.sleep(1)
        clear()
        gambling()
    elif opt3 == "3" or opt3 == "quit":
        time.sleep(1)
        clear()
    else:
        print("\nUnknown option")
        time.sleep(1)
        tavern()

# ^-------------------TAVERN--------------------------^


def forge():
    global game_state
    if get_level(length=10) >= 10:
        clear()
        print(f"{'No':<3} {'Upgrade':<54} {'Cost':>5}")
        print("-" * 64)
        print(f"{'1.':<3} {'Sharpness - weapon deals 15% more dmg':<54} {'100c':>5}")
        print(
            f"{'2.':<3} {'Flame - weapon deals extra 15 burn dmg per attack':<54} {'200c':>5}")
        print(
            f"{'3.':<3} {'Poison - weapon deals extra 20 poison dmg per attack':<54} {'250c':>5}")
        print(
            f"{'4.':<3} {'Power - weapon deals extra 50 dmg per attack':<54} {'325c':>5}")

        option = input("\nSelect your option:  ").lower().strip()
        if option == "1" or option == "sharpness":
            if game_state["COIN_BALANCE"] >= 100:
                game_state["COIN_BALANCE"] -= 100
                game_state['FORGE_UPGRADES'].append("sharpness")
                print("\nPurchase completed.")
                quiet_save_game(game_state)
                time.sleep(1)
            else:
                print("\nNot enough coins to purchase.")
                time.sleep(1)
        elif option == "2" or option == "flame":
            if game_state["COIN_BALANCE"] >= 200:
                game_state["COIN_BALANCE"] -= 200
                game_state['FORGE_UPGRADES'].append("flame")
                print("\nPurchase completed.")
                quiet_save_game(game_state)
                time.sleep(1)
            else:
                print("\nNot enough coins to purchase.")
                time.sleep(1)
        elif option == "3" or option == "poison":
            if game_state["COIN_BALANCE"] >= 250:
                game_state["COIN_BALANCE"] -= 250
                game_state['FORGE_UPGRADES'].append("poison")
                print("\nPurchase completed.")
                quiet_save_game(game_state)
                time.sleep(1)
            else:
                print("\nNot enough coins to purchase.")
                time.sleep(1)
        elif option == "4" or option == "power":
            if game_state["COIN_BALANCE"] >= 325:
                game_state["COIN_BALANCE"] -= 325
                game_state['FORGE_UPGRADES'].append("power")
                print("\nPurchase completed.")
                quiet_save_game(game_state)
                time.sleep(1)
            else:
                print("\nNot enough coins to purchase.")
                time.sleep(1)

    else:
        clear()
        print("Requires LVL 10 to enter")
        time.sleep(1.2)
        travel()

 # ^-------------------FORGE--------------------------^


def bar():
    global game_state
    print(f"{'No':<3} {'Beverage':<40} {'Cost':>10}")
    print("-" * 64)
    print(f"{'1.':<3} {'Beer':<40} {'10c':>10}")
    print(f"{'2.':<3} {'Whiskey':<40} {'20c':>10}")
    print(f"{'3.':<3} {'Vodka':<40} {'30c':>10}")

    choice = input(
        "\nSelect your option or press enter to quit:  ").lower().strip()
    if game_state.get('ALCOHOL_CONSUMED', 0) <= 10:
        if choice == "1" or choice == "beer":
            if game_state["COIN_BALANCE"] >= 10 and game_state['PLAYER_HEALTH'] > 5:
                game_state["COIN_BALANCE"] -= 10
                game_state['PLAYER_HEALTH'] -= 5
                game_state['XP'] += 7
                game_state['TOTAL_XP'] += 7
                game_state['ALCOHOL_CONSUMED'] += 1
                print("\nYou bought beer. You lose 5hp and gain 7xp")
                quiet_save_game(game_state)
                time.sleep(1)
                clear()
                tavern()
            else:
                print("\nNot enough coins or drinking would kill you")
                time.sleep(1)
                clear()
                tavern()
        elif choice == "2" or choice == "whiskey":
            if game_state["COIN_BALANCE"] >= 20 and game_state['PLAYER_HEALTH'] > 8:
                game_state["COIN_BALANCE"] -= 20
                game_state['PLAYER_HEALTH'] -= 8
                game_state['XP'] += 10
                game_state['TOTAL_XP'] += 10
                game_state['ALCOHOL_CONSUMED'] += 1
                print("\nYou bought whiskey. You lose 8hp and gain 10xp")
                quiet_save_game(game_state)
                time.sleep(1)
                clear()
                tavern()
            else:
                print("\nNot enough coins or drinking would kill you")
                time.sleep(1)
                clear()
                tavern()
        elif choice == "3" or choice == "vodka":
            if game_state["COIN_BALANCE"] >= 30 and game_state['PLAYER_HEALTH'] > 10:
                game_state["COIN_BALANCE"] -= 30
                game_state['PLAYER_HEALTH'] -= 10
                game_state['XP'] += 20
                game_state['TOTAL_XP'] += 20
                game_state['ALCOHOL_CONSUMED'] += 1
                print("\nYou drink vodka. You lose 10hp and gain 20xp")
                quiet_save_game(game_state)
                time.sleep(1)
                clear()
                tavern()
            else:
                print("\nNot enough coins or drinking would kill you")
                time.sleep(1)
                clear()
                tavern()
        else:
            print("\nUnknown option")
            time.sleep(1)
            clear()
            tavern()
    else:
        clear()
        print("You've consumed over 10 alcoholic beverages. Think about your liver man.")
        time.sleep(2)

 # ^-------------------BAR--------------------------^


def gambling_mechanic():
    global game_state
    global get_level

    if get_level(length=10) >= 5:
        max_bet = 500
    elif "high stakes" in game_state.get('META_ITEMS', []):
        max_bet = 1000000
    else:
        max_bet = 100
    while True:
        try:
            clear()
            print(f"Balance: {game_state["COIN_BALANCE"]}")
            bet = int(input(f"\nSelect your bet amount (1-{max_bet}c): "))
            if bet < 1 or bet > max_bet or bet > game_state["COIN_BALANCE"]:
                print(
                    f"\nInvalid bet. Must be between 1 and {max_bet}, and within your balance.")
                time.sleep(1.5)
                clear()
                continue
            break
        except ValueError:
            clear()
            print("\nInvalid input. Please enter a number.")
            time.sleep(1)
            clear()

    shown_number = random.randint(1, 30)
    hidden_number = random.randint(1, 30)
    clear()
    print(f"Is the hidden number higher/lower than {shown_number} or exact?")
    choice = input(
        "\n\nSelect your option:\n1. Higher -h\n2. Lower -l\n3. Exact -e\n\n> ").lower().strip()

    # Higher Guess
    if choice in ["1", "higher", "-h", "h"]:
        if hidden_number > shown_number:
            clear()
            print(f"You won! Hidden number was: {hidden_number}")
            winnings = bet
            game_state["COIN_BALANCE"] += winnings
            game_state['TOTAL_COINS_EARNED'] += winnings
            time.sleep(1)
        else:
            clear()
            print(f"You lost! Hidden number was: {hidden_number}")
            game_state["COIN_BALANCE"] -= bet
            time.sleep(1)

    # Lower Guess
    elif choice in ["2", "lower", "-l", "l"]:
        if hidden_number < shown_number:
            clear()
            print(f"You won! Hidden number was: {hidden_number}")
            winnings = bet
            game_state["COIN_BALANCE"] += winnings
            game_state['TOTAL_COINS_EARNED'] += winnings
            time.sleep(1)
        else:
            clear()
            print(f"\nYou lost! Hidden number was: {hidden_number}")
            game_state["COIN_BALANCE"] -= bet
            time.sleep(1)

    # Exact Guess
    elif choice in ["3", "exact", "-e", "e"]:
        while True:
            try:
                clear()
                exact = int(input("Type in your exact guess (1-30): "))
                if exact < 1 or exact > 30:
                    print("Guess must be between 1 and 30.")
                    time.sleep(1)
                    continue
                break
            except ValueError:
                clear()
                print("Guess was not a number.")
                time.sleep(1)

        if exact == hidden_number:
            clear()
            print(f"\nYou won! Hidden number was: {hidden_number}")
            winnings = bet * 29
            game_state["COIN_BALANCE"] += winnings
            game_state['TOTAL_COINS_EARNED'] += winnings
            time.sleep(1)
        else:
            clear()
            print(f"\nYou lost! Hidden number was: {hidden_number}")
            game_state["COIN_BALANCE"] -= bet
            time.sleep(1)

    else:
        clear()
        print("Invalid choice. No coins lost this round.")
        time.sleep(1)

    if game_state["COIN_BALANCE"] <= 0:
        print("\nYou're out of coins!")
        time.sleep(2)
        clear()
        tavern()
        return

    clear()
    again = input(
        'Play again? (yes or "y" to continue, anything else to quit): ').lower().strip()
    if again == "yes" or again == "y":
        gambling_mechanic()
    else:
        clear()
        tavern()

 # ^-------------------GAMBLING MECHANIC--------------------------^


def gambling():
    global game_state
    game_state["GAMBLED"] = True
    clear()
    print(
        "Rules:"
        "\n\nGuess whether the hidden number (between 1 and 30) is higher or lower"
        "\nthan a shown number, or guess the exact number to win more."
        "\n\nMin/max bet - 1c/100c or 500c after LVL 5"
        "\n\nRewards:"
        "\n\nHi/low win - dobule the bet"
        "\nExact number guess - bet is multiplied by 30 (30x the bet amount)"
        "\nOn loss you lose your bet"
    )
    opt = input(
        '\nPress enter to continue or type in "quit" to do so  ').lower().strip()
    if opt == "quit":
        clear()
        tavern()
    else:
        if game_state["COIN_BALANCE"] >= 1:
            gambling_mechanic()
        else:
            clear()
            print("You don't have any coins to play with")
            time.sleep(1.2)
            tavern()

 # ^-------------------GAMBLING RULES--------------------------^


def lockpicking_game():
    global game_state
    clear()
    code = [random.randint(1, 9) for _ in range(3)]
    hints = []
    squares = [1, 2]
    random.shuffle(squares)

    # hints
    for i in squares[:2]:
        if random.choice([True, False]):
            if code[i] % 2 == 0:
                hints.append(f"Digit {i+1} is even.")
            else:
                hints.append(f"Digit {i+1} is odd.")
        else:
            actual = code[i]
            if actual == 1:
                # Can't go lower
                upper = random.randint(2, 9)
                hints.append(f"Digit {i+1} is lower than {upper}.")
            elif actual == 9:
                # Can't go higher
                lower = random.randint(1, 8)
                hints.append(f"Digit {i+1} is higher than {lower}.")
            else:
                if random.choice([True, False]):
                    upper = random.randint(actual + 1, 9)
                    hints.append(f"Digit {i+1} is lower than {upper}.")
                else:
                    lower = random.randint(1, actual - 1)
                    hints.append(f"Digit {i+1} is higher than {lower}.")

    attempts = 5
    initial_attempts = attempts

    combination = [f"[{code[0]}]", "[*]", "[*]"]
    # ui
    while attempts > 0:
        clear()
        print(
            "Guess the combination! Each [*] has a hidden number between 1-9\n")

        # Show current known state on top
        print('Current attempt:', "".join(combination))

        print("\nHints:")
        for hint in hints:
            print("- " + hint)
        print(f"\nAttempts left: {attempts}")

        guess = input("\nEnter your guess (e.g. 123): ").strip()

        if len(guess) != 3 or not guess.isdigit():
            print("\nInvalid format.")
            time.sleep(1)
            continue

        guess_digits = [int(e) for e in guess]

        for i in range(1, 3):
            if guess_digits[i] == code[i]:
                combination[i] = f"[{code[i]}]"
            else:
                combination[i] = "[*]"

        if guess_digits == code:
            if attempts == initial_attempts:
                reward = (random.randint(10, 50) * 10)
                clear()
                game_state['UNLOCKED_CHEST'] = True
                print(
                    "Unlocked! You picked the lock successfully on the first try! Rewards are tenfolded (x10)")
                print(
                    f"\nThere were {reward}c hidden.\nYou gained as much xp.")
                game_state["COIN_BALANCE"] += reward
                game_state['TOTAL_COINS_EARNED'] += reward
                game_state['XP'] += reward
                game_state['TOTAL_XP'] += reward
                quiet_save_game(game_state)
                time.sleep(2.5)
                travel()
                return
            else:
                reward = random.randint(10, 50)
                clear()
                game_state['UNLOCKED_CHEST'] = True
                print("Unlocked! You picked the lock successfully.")
                print(
                    f"\nThere were {reward}c hidden.\nYou gained as much xp.")
                game_state["COIN_BALANCE"] += reward
                game_state['TOTAL_COINS_EARNED'] += reward
                game_state['XP'] += reward
                game_state['TOTAL_XP'] += reward
                quiet_save_game(game_state)
                time.sleep(2.2)
                travel()
                return
        else:
            attempts -= 1
            if attempts == 0:
                clear()
                print(
                    f"Failed! The correct code was {code[0]} {code[1]} {code[2]}")
                time.sleep(2)
                travel()
                return
            else:
                time.sleep(1)

 # ^-------------------LOCKPICKING--------------------------^


def cave_opp_damage(cave_opponent, cave_opponent_name):
    global game_state
    min_dmg = int(cave_opponent["Attack"][0])
    max_dmg = int(cave_opponent["Attack"][1])
    opp_damage = random.randint(min_dmg, max_dmg)
    cave_damage = opp_damage
    game_state['PLAYER_HEALTH'] -= cave_damage
    quiet_save_game(game_state)
    return cave_damage


def cave_attack(opponent_name, opponent, damage):
    global game_state
    clear()
    print("-" * 64)
    opponent["Health"] -= damage

    if opponent["Health"] <= 0:
        print(f"You defeated the {opponent_name}!\n")
        print(f"You gained {opponent['XP']} XP!")
        coins_earned = reward(opponent)
        print(f"You gained {coins_earned}c!")
        game_state['XP'] += opponent['XP']
        game_state['TOTAL_XP'] += opponent['XP']
        game_state['KILL_COUNT'] += 1
        time.sleep(1.5)
        return True

    enemy_damage = cave_opp_damage(opponent, opponent_name)
    print(f"The {opponent_name} hits you back and deals {enemy_damage} damage!")
    opponent["Health"] = max(opponent["Health"], 0)
    print(
        f"\n{opponent_name}'s remaining health:{hp_bar(opponent['Health'], opponent['Max_Health'])}")
    warning = low_health()
    print(
        f"\nYour remaining health: {game_state['PLAYER_HEALTH']}/{game_state['MAX_HEALTH']} " + (f" {warning}" if warning else ""))
    if game_state['PLAYER_HEALTH'] <= 0:
        time.sleep(0.5)
        death()
        quiet_save_game(game_state)

    return False

# ^-------------------CAVE PVP--------------------------^


def cursed_cave():
    global game_state
    game_state['CAVE_ENTERED'] = True
    print("You step into the Cursed Cave. It's cold... and cursed.")
    time.sleep(2)
    cave_opponent_name = random.choice(list(cave_opponent_list.keys()))
    cave_opponent = copy.deepcopy(cave_opponent_list[cave_opponent_name])
    cave_opponent["Health"] = int(cave_opponent["Base_Health"])
    cave_opponent["Max_Health"] = cave_opponent["Health"]
    clear()

    print("-" * 64)
    print(f"A {cave_opponent_name} appeared!")
    time.sleep(0.7)

    if game_state['PLAYER_HEALTH'] <= 0:
        time.sleep(0.5)
        death()
        quiet_save_game(game_state)

    while cave_opponent["Health"] > 0:
        if game_state['GAME_RUNNING'] == False:
            break
        print("\nMake your choice: \n1. Attack \n2. Defend\n3. Use item\n4. Flee")
        print("-" * 64)
        choice = input("\nEnter your choice: ").lower().strip()
        if choice == "1" or choice == "attack":
            selected_weapon_key = game_state.get("SELECTED_WEAPON")
            selected_weapon = inventory_items.get(selected_weapon_key)
            attack_range = selected_weapon["Attack"]
            player_attack = random.randint(*attack_range)
            forge_upgrades = game_state.get('FORGE_UPGRADES', [])
            forge_upgrades_lower = [u.lower() for u in forge_upgrades]

            sharpness_count = forge_upgrades_lower.count("sharpness")
            player_attack = int(
                player_attack * (1 + 0.15 * sharpness_count))

            flame_count = forge_upgrades_lower.count("flame")
            player_attack += 15 * flame_count

            poison_count = forge_upgrades_lower.count("poison")
            player_attack += 20 * poison_count

            power_count = forge_upgrades_lower.count("power")
            player_attack += 50 * power_count

            player_attack += game_state.get('DAMAGE_UPGRADE', 0)
            damage = player_attack
            print(
                f"\n\nYou {get_attack_text()} the {cave_opponent_name} and dealt {damage} damage!")
            time.sleep(1)
            if cave_attack(cave_opponent_name, cave_opponent, damage):
                break
        elif choice == "2" or choice == "defend":
            time.sleep(1)
            clear()
            print("You chose to defend!")
            damage_taken = cave_opp_damage(
                cave_opponent, cave_opponent_name) // 2
            print(f"You defended! Damage reduced to {damage_taken}.")
            game_state['PLAYER_HEALTH'] -= damage_taken
            quiet_save_game(game_state)
            time.sleep(1)
            if game_state['PLAYER_HEALTH'] <= 0:
                time.sleep(1)
                death()
                clear()
                quiet_save_game(game_state)

        elif choice == "3" or choice == "use item" or choice == "item":  # Perishable items
            time.sleep(1)
            clear()
            owned_items = game_state['BOUGHT_ITEMS']
            counts = {}
            for item in owned_items:
                counts[item] = counts.get(item, 0) + 1

            formatted_items = []
            for item, count in counts.items():
                if count > 1:
                    formatted_items.append(f"{item} x{count}")
                else:
                    formatted_items.append(item)

            # Item list
            items_str = "\n".join(word.capitalize()
                                  for word in formatted_items)
            print("Your items:\n\n" + items_str)
            use = input("\nSelect your choice:  ").lower().strip()

            if use == "dagger":
                game_state['BOUGHT_ITEMS'].remove("dagger")
                cave_opponent["Health"] -= 15
                print(
                    f"\n15 dmg dealt! {cave_opponent_name}'s remaining health: {hp_bar(cave_opponent['Health'], cave_opponent['Max_Health'])}")
                time.sleep(1.75)
                clear()
                quiet_save_game(game_state)

            elif use == "bomb":
                game_state['BOUGHT_ITEMS'].remove("bomb")
                cave_opponent["Health"] -= 50
                print(
                    f"\n50 dmg dealt! {cave_opponent_name}'s remaining health: {hp_bar(cave_opponent['Health'], cave_opponent['Max_Health'])}")
                time.sleep(2)
                clear()
                quiet_save_game(game_state)

            elif use == "health potion" or use == "health potion":
                game_state['BOUGHT_ITEMS'].remove("health potion")
                game_state['PLAYER_HEALTH'] += 25
                print(
                    f"\n25hp healed! Current health: {game_state['PLAYER_HEALTH']}")
                time.sleep(2)
                clear()
                quiet_save_game(game_state)

            else:
                print("\nUnknown choice")
                time.sleep(1.75)
                clear()

        elif choice == "4" or choice == "flee":
            time.sleep(0.5)
            clear()
            print("There's no turning back.")
            time.sleep(1)
            clear()
        else:
            print("\nInvalid command.")
            time.sleep(1)
            clear()

# ^-------------------CURSED CAVE--------------------------^


def meta_shop():
    clear()
    print("Your meta points balance:", game_state.get('META_POINTS', 0), "\n\n")
    print(f"{'No':<3} {'Item':<40} {'Cost':>10}")
    print("-" * 64)
    print(f"{'1.':<3} {'Survivor perk - survive one lethal damage once':<50} {'300p':>10}")
    print(f"{'2.':<3} {'High stakes - bet cap raised to 1,000,000':<50} {'100p':>10}")
    print(f"{'3.':<3} {'Shiny infinity blade - 60-120dmg':<50} {'500p':>10}")
    print(f"{'4.':<3} {'World splitter - 200-400dmg':<50} {'1000p':>10}")
    print(f"{'5.':<3} {'Auto grind - enable \"autogrind\" command':<50} {'1000p':>10}")

    option = input("\nSelect your choice:  ").lower().strip()

    if option == "1" or option == "survivor":
        cost = 300
        if 'survivor' in game_state.get('META_ITEMS', []):
            print("\nYou already own the Survivor perk.")
            time.sleep(1)
            travel()
        elif game_state['META_POINTS'] < cost:
            print("\nNot enough meta points.")
            time.sleep(1)
            travel()
        else:
            game_state['META_ITEMS'].append('survivor')
            game_state['META_POINTS'] -= cost
            print("\nSurvivor perk purchased!")
            time.sleep(1)
            travel()
            quiet_save_game(game_state)
    elif option == "2" or option == "high stakes":
        cost = 100
        if 'high stakes' in game_state.get('META_ITEMS', []):
            print("\nYou already own the High stakes perk.")
            time.sleep(1)
            travel()
        elif game_state['META_POINTS'] < cost:
            print("\nNot enough meta points.")
            time.sleep(1)
            travel()
        else:
            game_state['META_ITEMS'].append('high stakes')
            game_state['META_POINTS'] -= cost
            print("\nHigh stakes perk purchased!")
            time.sleep(1)
            travel()
            quiet_save_game(game_state)
    elif option == "3" or option == "shiny infinity blade":
        cost = 500
        if 'shiny infinity blade' in game_state.get('META_ITEMS', []):
            print("\nYou already own the shiny infinity blade.")
            time.sleep(1)
            travel()
        elif game_state['META_POINTS'] < cost:
            print("\nNot enough meta points.")
            time.sleep(1)
            travel()
        else:
            game_state['META_ITEMS'].append('shiny infinity blade')
            game_state['META_POINTS'] -= cost
            print("\nShiny infinity blade purchased!")
            time.sleep(1)
            travel()
            quiet_save_game(game_state)
    elif option == "4" or option == "world splitter":
        cost = 1000
        if 'world splitter' in game_state.get('META_ITEMS', []):
            print("\nYou already own the world splitter.")
            time.sleep(1)
            travel()
        elif game_state['META_POINTS'] < cost:
            print("\nNot enough meta points.")
            time.sleep(1)
            travel()
        else:
            game_state['META_ITEMS'].append('world splitter')
            game_state['META_POINTS'] -= cost
            print("\nWorld splitter purchased!")
            time.sleep(1)
            travel()
            quiet_save_game(game_state)
    elif option == "5" or option == "auto grind":
        cost = 1000
        if 'auto grind' in game_state.get('META_ITEMS', []):
            print("\nYou already own auto grind")
            time.sleep(1)
            travel()
        elif game_state['META_POINTS'] < cost:
            print("\nNot enough meta points.")
            time.sleep(1)
            travel()
        else:
            game_state['META_ITEMS'].append('auto grind')
            game_state['META_POINTS'] -= cost
            print("\nAuto grind purchased!")
            time.sleep(1)
            travel()
            quiet_save_game(game_state)
    else:
        print("\nInvalid option.")
        input("\nPress Enter to return to main menu...")
        travel()


# ^-------------------META SHOP--------------------------^


def travel():
    clear()
    print(
        "Destinations:"
        "\n1. Tavern"
        "\n2. Chest haven"
        "\n3. Forge - Requires lvl 10"
        "\n4. Cursed cave - Requires lvl 15"
        "\n5. Meta shop"
        "\n6. Quit"
    )
    option = input("\nSelect your destination:  ").lower().strip()
    if option == "1" or option == "tavern":
        time.sleep(1)
        clear()
        tavern()
    elif option == "2" or option == "chest haven":
        time.sleep(1)
        clear()
        lockpicking_game()
    elif option == "3" or option == "forge":
        time.sleep(1)
        clear()
        forge()
    elif option == "4" or option == "cursed cave":
        if get_level(length=10) >= 15:
            clear()
            print("200hp+ reccomended - Magic shield dosen't work here")
            confirm = input(
                "\nAre you REALLY sure? (y/n)  ")
            if confirm == "y" or confirm == "yes":
                time.sleep(1)
                clear()
                cursed_cave()
            elif confirm == "n" or confirm == "no":
                clear()
                pass
        else:
            clear()
            print("Requires lvl 15 to enter")
            time.sleep(1.5)
            travel()
    elif option == "5" or option == "meta shop":
        meta_shop()
    elif option == "6" or option == "quit":
        quiet_save_game(game_state)
        time.sleep(1)
        clear()
    else:
        print("\nUnknown option")
        time.sleep(1)
        travel()

 # ^-------------------TRAVEL--------------------------^


def auto_grind():
    global game_state
    if 'auto grind' in game_state.get('META_ITEMS', []):
        clear()
        print("Stops only when health is too low. Workaround: exit the game, data will be saved")
        print(
            "\nRewards:\n"
            "\nXP - 5-10xp"
            "\nCOINS - 3-10c"
            "\nDAMAGE TAKEN - 5-12dmg"
        )
        ask = input("\nAre you sure? (y/n)  ")
        if ask == "y" or ask == "yes":
            print("\nAuto-grind started.\n")
            time.sleep(1)

            while game_state["PLAYER_HEALTH"] > 15 and game_state["GAME_RUNNING"]:
                earned_xp = random.randint(5, 10)
                earned_coins = random.randint(3, 10)
                health_loss = random.randint(5, 12)

                game_state["XP"] += earned_xp
                game_state["TOTAL_XP"] += earned_xp
                game_state["COIN_BALANCE"] += earned_coins
                game_state["PLAYER_HEALTH"] -= health_loss

                print(f"+{earned_xp} XP, +{earned_coins} coins, -{health_loss} HP")
                quiet_save_game(game_state)

                if game_state["PLAYER_HEALTH"] <= 10:
                    print("\nHealth too low to continue grinding.")
                    input("\nPress enter to return to main menu")
                    break

                if game_state['MAX_HEALTH'] >= 250:
                    time.sleep(0.01)
                else:
                    time.sleep(0.2)
        else:
            return
    else:
        print("You have to buy auto grind first.")
        time.sleep(2)

# ^-------------------AUTO-GRIND--------------------------^


while game_state['GAME_RUNNING'] == True:
    if not game_state['GAME_RUNNING']:
        break
    time.sleep(0.05)
    clear()
    print("-" * 64)
    quiet_save_game(game_state)
    print(
        f"What would you like to do, {game_state['PLAYER_NAME']}? \n1. Combat\n2. Weapon selection\n3. Player\n4. Check progress\n5. Rest\n6. Shop\n7. Travel\n8. Help\n9. Exit")
    print("-" * 64)
    command = input("> ").lower().strip()
    print("-" * 64)

    # combat
    if command == "combat" or command == "1":
        time.sleep(0.01)
        clear()
        combat_mechanic()
        if not game_state['GAME_RUNNING']:
            break
        input("\nPress Enter to return to main menu...")
    # weapon selection
    elif command == "weapon selection" or command == "2":
        time.sleep(0.01)
        clear()
        select_weapon()
    # player info
    elif command == "player" or command == "3":
        level = get_level()
        time.sleep(0.01)
        clear()
        header = f"LEVEL: ({level})"
        padding_left = (64 - len(header)) // 2
        padding_right = 64 - len(header) - padding_left
        print("-" * padding_left + header + "-" * padding_right)
        print(f"Your XP: {game_state['XP']}")
        print(f"\nYour balance: {game_state['COIN_BALANCE']}")
        print(
            f"\nYour health: {game_state['PLAYER_HEALTH']}/{game_state['MAX_HEALTH']}")
        print(f"\nMonsters slain: {game_state['KILL_COUNT']}")
        weapon_key = game_state.get('SELECTED_WEAPON')
        if weapon_key and weapon_key in inventory_items:
            weapon_title = inventory_items[weapon_key]["Title"].capitalize()
            extra_damage = game_state.get('DAMAGE_UPGRADE', 0)
            print(
                f"\nSelected weapon: {weapon_title} + extra {extra_damage} damage")
        else:
            print("\nNo weapon selected.")
        # item inventory

        def format_with_counts(items):
            counts = {}
            for item in items:
                item_lower = item.lower()
                counts[item_lower] = counts.get(item_lower, 0) + 1
            parts = []
            for item_lower, count in counts.items():
                display = item_lower.capitalize()
                if count > 1:
                    display += f" x{count}"
                parts.append(display)
            return ", ".join(parts) if parts else "None"

        print("\nEnchantments: " +
              format_with_counts(game_state.get('PLAYER_ENCHANTMENTS', [])))
        print("\nForge upgrades: " +
              format_with_counts(game_state.get('FORGE_UPGRADES', [])))
        print("\nBought items: " +
              format_with_counts(game_state.get('BOUGHT_ITEMS', [])))
        print("-" * 64)
        input("\nPress Enter to return to main menu...")
    # level
    elif command == "progress" or command == "check progress" or command == "4":
        time.sleep(0.01)
        clear()
        progress()
    # rest
    elif command == "rest" or command == "5":
        time.sleep(0.01)
        clear()
        rest()
        time.sleep(1)
    # shop
    elif command == "shop" or command == "6":
        time.sleep(0.01)
        clear()
        shop()
    # travel
    elif command == "travel" or command == "7":
        time.sleep(0.01)
        clear()
        travel()
    # help
    elif command == "help" or command == "8":
        time.sleep(0.01)
        clear()
        print("There are hidden unlisted commands ;]\n\nTry typing in 'credits' or 'joke' or some other popular commands")
        input("\nPress Enter to return to main menu...")
    # exit
    elif command == "exit" or command == "quit" or command == "9":
        time.sleep(0.01)
        clear()
        print("Farewell!")
        time.sleep(1)
        print("\n\n\nMade with love by: Ashton <3")
        time.sleep(1.5)
        save_game(game_state)
        break
    # easteregg
    elif command == "easteregg" or command == "easter egg":
        clear()
        print("here it is\n\n\n\nps. nothing happens")
        time.sleep(2)
    # godmode
    elif command == "godmode" or command == "god mode":
        time.sleep(0.01)
        clear()
        game_state['MAX_HEALTH'] = 100000
        game_state['PLAYER_HEALTH'] = 100000
        game_state['XP'] = 2000
        game_state['TOTAL_XP'] = 2000
        game_state['TOTAL_COINS_EARNED'] = 10000
        game_state["COIN_BALANCE"] = 10000
        game_state["CHEATED"] = True
        game_state["KILL_COUNT"] = 99999
        game_state["ALCOHOL_CONSUMED"] = 10
        print(
            "godmode activated >:[\n\n\n\nThank you for breaking the game. :[")
        time.sleep(1)
    # motherlode
    elif command == "motherlode":
        time.sleep(0.01)
        clear()
        game_state['COIN_BALANCE'] += 50000
        game_state['TOTAL_COINS_EARNED'] += 50000
        game_state["CHEATED"] = True
        print("+50,000 coins\n\n\n\n\nThank you for breaking the game. :[")
        time.sleep(1)
    # joke
    elif command == "fun" or command == "joke":
        time.sleep(0.01)
        clear()
        print("A bear walks into a bar and says,")
        time.sleep(1)
        print("Give me a whiskey""")
        time.sleep(1)
        print("and...")
        time.sleep(2)
        print("cola.")
        time.sleep(1)
        print("\nWhy the big pause?' asks the bartender.")
        time.sleep(2)
        print("The bear shrugged.")
        time.sleep(2)
        print("I'm not sure; I was born with them.")
        time.sleep(2)
        input("\n\n\nPress Enter to return to main menu...")
    # credits
    elif command == "credits":
        clear()
        print(r"""
╔══════════════════════════════════════╗
║               CREDITS                ║
╠══════════════════════════════════════╣
║ Made by: Ashton <3                   ║
║                                      ║
║ Version 1.3 - 2025                   ║
╚══════════════════════════════════════╝
           """)
        input("Press Enter to return to continue...")
    elif command == "autogrind" or command == "auto grind":
        clear()
        auto_grind()
    else:
        print("\nUnknown command.")
        time.sleep(1)

# ^-------------------MENU--------------------------^
